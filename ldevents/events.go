package ldevents

import (
	"time"

	"gopkg.in/launchdarkly/go-sdk-common.v2/ldreason"
	"gopkg.in/launchdarkly/go-sdk-common.v2/lduser"
	"gopkg.in/launchdarkly/go-sdk-common.v2/ldvalue"
	ldeval "gopkg.in/launchdarkly/go-server-sdk-evaluation.v1"
)

// An Event represents an analytics event generated by the client, which will be passed to
// the EventProcessor.  The event data that the EventProcessor actually sends to LaunchDarkly
// may be slightly different.
type Event interface {
	GetBase() BaseEvent
}

// BaseEvent provides properties common to all events.
type BaseEvent struct {
	CreationDate uint64
	User         lduser.User
}

// FeatureRequestEvent is generated by evaluating a feature flag or one of a flag's prerequisites.
type FeatureRequestEvent struct {
	BaseEvent
	Key                  string
	Variation            *int
	Value                ldvalue.Value
	Default              ldvalue.Value
	Version              *int
	PrereqOf             *string
	Reason               ldreason.EvaluationReason
	TrackEvents          bool
	Debug                bool
	DebugEventsUntilDate *uint64
}

// CustomEvent is generated by calling the client's Track method.
type CustomEvent struct {
	BaseEvent
	Key         string
	Data        ldvalue.Value
	MetricValue *float64
}

// IdentifyEvent is generated by calling the client's Identify method.
type IdentifyEvent struct {
	BaseEvent
}

// IndexEvent is generated internally to capture user details from other events.
type IndexEvent struct {
	BaseEvent
}

func NewUnknownFlagEvent(key string, user lduser.User, defaultVal ldvalue.Value, reason ldreason.EvaluationReason,
	includeReason bool) FeatureRequestEvent {
	fre := FeatureRequestEvent{
		BaseEvent: BaseEvent{
			CreationDate: now(),
			User:         user,
		},
		Key:     key,
		Value:   defaultVal,
		Default: defaultVal,
	}
	if includeReason {
		fre.Reason = reason
	}
	return fre
}

func NewSuccessfulEvalEvent(flag *ldeval.FeatureFlag, user lduser.User, variation int, value, defaultVal ldvalue.Value,
	reason ldreason.EvaluationReason, includeReason bool, prereqOf *string) FeatureRequestEvent {
	requireExperimentData := ldeval.IsExperimentationEnabled(*flag, reason)
	fre := FeatureRequestEvent{
		BaseEvent: BaseEvent{
			CreationDate: now(),
			User:         user,
		},
		Key:                  flag.Key,
		Version:              &flag.Version,
		Value:                value,
		Default:              defaultVal,
		PrereqOf:             prereqOf,
		TrackEvents:          requireExperimentData || flag.TrackEvents,
		DebugEventsUntilDate: flag.DebugEventsUntilDate,
	}
	if variation >= 0 {
		fre.Variation = &variation
	}
	if includeReason || requireExperimentData {
		fre.Reason = reason
	}
	return fre
}

// GetBase returns the BaseEvent
func (evt FeatureRequestEvent) GetBase() BaseEvent {
	return evt.BaseEvent
}

func NewCustomEvent(key string, user lduser.User, data ldvalue.Value, withMetric bool, metricValue float64) CustomEvent {
	ce := CustomEvent{
		BaseEvent: BaseEvent{
			CreationDate: now(),
			User:         user,
		},
		Key:  key,
		Data: data,
	}
	if withMetric {
		ce.MetricValue = &metricValue
	}
	return ce
}

// GetBase returns the BaseEvent
func (evt CustomEvent) GetBase() BaseEvent {
	return evt.BaseEvent
}

// NewIdentifyEvent constructs a new identify event, but does not send it. Typically, Identify should be used to both create the
// event and send it to LaunchDarkly.
func NewIdentifyEvent(user lduser.User) IdentifyEvent {
	return IdentifyEvent{
		BaseEvent: BaseEvent{
			CreationDate: now(),
			User:         user,
		},
	}
}

// GetBase returns the BaseEvent
func (evt IdentifyEvent) GetBase() BaseEvent {
	return evt.BaseEvent
}

// GetBase returns the BaseEvent
func (evt IndexEvent) GetBase() BaseEvent {
	return evt.BaseEvent
}

func now() uint64 {
	return toUnixMillis(time.Now())
}

func toUnixMillis(t time.Time) uint64 {
	ms := time.Duration(t.UnixNano()) / time.Millisecond

	return uint64(ms)
}
